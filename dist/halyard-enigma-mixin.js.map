{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 3deee1ed6e5c591f2364","webpack:///./src/enigma-mixin/halyard-enigma-mixin.js","webpack:///./src/enigma-mixin/utils.js"],"names":["CONNECTION_ERROR","LOADING_ERROR","SYNTAX_ERROR","createErrorMessage","errorType","qixError","item","type","message","qErrorString","halyardMixin","types","init","args","config","api","Promise","extend","createSessionAppUsingHalyard","halyard","that","createSessionApp","then","setScriptAndReloadWithHalyard","app","createAppUsingHalyard","appName","createApp","appId","qAppId","openDoc","result","reloadAppUsingHalyard","existingAppName","createIfMissing","catch","error","COULD_NOT_FIND_APP","code","reject","appendToScriptAndReloadWithHalyard","doSaveAfterReload","deferredConnections","getConnections","forEach","connection","qixConnectionObject","getQixConnectionObject","connectionPromise","createConnection","err","LOCERR_CONNECTION_ALREADY_EXISTS","push","getScript","currentScript","newScript","all","getLocaleInfo","localeInfoResult","setDefaultSetStatements","globalApi","configureReload","setScript","doReload","getProgress","progressResult","qErrorData","length","checkScriptSyntax","syntaxCheckData","getItemThatGeneratedScriptAt","qTextPos","doSave","exposeGlobalApi","getObjectArgs","handle","id","genericType","customType","delta","session","getObjectApi","module","exports","convertQixGetLocalInfo","localInfoData","ThousandSep","qThousandSep","DecimalSep","qDecimalSep","MoneyThousandSep","qMoneyThousandSep","MoneyDecimalSep","qMoneyDecimalSep","MoneyFormat","qMoneyFmt","TimeFormat","qTimeFmt","DateFormat","qDateFmt","TimestampFormat","qTimestampFmt","FirstWeekDay","qFirstWeekDay","ReferenceDay","qReferenceDay","FirstMonthOfYear","qFirstMonthOfYear","CollationLocale","qCollation","MonthNames","qCalendarStrings","qMonthNames","LongMonthNames","qLongMonthNames","DayNames","qDayNames","LongDayNames","qLongDayNames"],"mappings":"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","file":"halyard-enigma-mixin.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"halyard-enigma-mixin\"] = factory();\n\telse\n\t\troot[\"halyard-enigma-mixin\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3deee1ed6e5c591f2364","import convertQixGetLocalInfo from './utils';\n\nconst CONNECTION_ERROR = 'Connection Error';\nconst LOADING_ERROR = 'Loading Error';\nconst SYNTAX_ERROR = 'Syntax Error';\n\nfunction createErrorMessage(errorType, qixError, item) {\n  return {\n    type: errorType,\n    message: qixError.message || qixError.qErrorString,\n    item,\n    qixError,\n  };\n}\n\nconst halyardMixin = {\n  types: 'Global',\n  init(args) {\n    if (args.config) {\n      args.api.Promise = args.config.Promise;\n    } else {\n      args.api.Promise = args.Promise;\n    }\n  },\n  extend: {\n    createSessionAppUsingHalyard(halyard) {\n      const that = this;\n      return that.createSessionApp().then(app =>\n        that.setScriptAndReloadWithHalyard(app, halyard, false));\n    },\n\n    createAppUsingHalyard(appName, halyard) {\n      const that = this;\n      return that.createApp(appName).then((app) => {\n        const appId = app.qAppId;\n        return that.openDoc(appId).then(result =>\n          that.setScriptAndReloadWithHalyard(result, halyard, true));\n      });\n    },\n\n    reloadAppUsingHalyard(existingAppName, halyard, createIfMissing) {\n      const that = this;\n      return that.openDoc(existingAppName)\n        .catch((error) => {\n          const COULD_NOT_FIND_APP = 1003;\n\n          if (createIfMissing && error.code === COULD_NOT_FIND_APP) {\n            return that.createApp(existingAppName).then(app => that.openDoc(app.qAppId));\n          }\n          return that.Promise.reject(error);\n        })\n        .then(result => that.setScriptAndReloadWithHalyard(result, halyard, true));\n    },\n\n    appendToScriptAndReloadWithHalyard(app, halyard, doSaveAfterReload) {\n      const that = this;\n      const deferredConnections = [];\n\n      halyard.getConnections().forEach((connection) => {\n        const qixConnectionObject = connection.getQixConnectionObject();\n        if (qixConnectionObject) {\n          const connectionPromise = app.createConnection(qixConnectionObject)\n          .then(result => result, (err) => {\n            const LOCERR_CONNECTION_ALREADY_EXISTS = 2000;\n\n            // Will not throw error if connection already exists.\n            // The connections guid makes the connections unique and we assumes that it\n            // is the same that was previously created\n            if (!(err.code && err.code === LOCERR_CONNECTION_ALREADY_EXISTS)) {\n              throw createErrorMessage(CONNECTION_ERROR, err, connection);\n            }\n          });\n\n          deferredConnections.push(connectionPromise);\n        }\n      });\n\n      return app.getScript().then((currentScript) => {\n        const newScript = halyard.getScript();\n        return that.Promise.all(deferredConnections).then(() =>\n          app.getLocaleInfo().then((localeInfoResult) => {\n            halyard.setDefaultSetStatements(convertQixGetLocalInfo(localeInfoResult), true);\n            return app.globalApi.configureReload(true, true, false).then(\n              () => app.setScript(`${currentScript}\\n${newScript}`).then(\n                () => app.doReload().then(() => app.globalApi.getProgress(0).then(\n                  (progressResult) => {\n                    if (progressResult.qErrorData.length !== 0) {\n                      return app.checkScriptSyntax().then((syntaxCheckData) => {\n                        if (syntaxCheckData.length === 0) {\n                          throw createErrorMessage(LOADING_ERROR, progressResult.qErrorData[0]);\n                        } else {\n                          const item =\n                            halyard.getItemThatGeneratedScriptAt(syntaxCheckData[0].qTextPos);\n                          throw createErrorMessage(SYNTAX_ERROR,\n                            progressResult.qErrorData[0],\n                            item);\n                        }\n                      });\n                    }\n\n                    if (doSaveAfterReload) {\n                      return app.doSave().then(() => app);\n                    }\n\n                    return app;\n                  })\n                )\n              )\n            );\n          })\n        );\n      });\n    },\n\n    setScriptAndReloadWithHalyard(app, halyard, doSaveAfterReload) {\n      const that = this;\n      const deferredConnections = [];\n\n      halyard.getConnections().forEach((connection) => {\n        const qixConnectionObject = connection.getQixConnectionObject();\n        if (qixConnectionObject) {\n          const connectionPromise = app.createConnection(qixConnectionObject)\n          .then(result => result, (err) => {\n            const LOCERR_CONNECTION_ALREADY_EXISTS = 2000;\n\n            // Will not throw error if connection already exists.\n            // The connections guid makes the connections unique and we assumes that it\n            // is the same that was previously created\n            if (!(err.code && err.code === LOCERR_CONNECTION_ALREADY_EXISTS)) {\n              throw createErrorMessage(CONNECTION_ERROR, err, connection);\n            }\n          });\n\n          deferredConnections.push(connectionPromise);\n        }\n      });\n\n      return that.Promise.all(deferredConnections).then(() =>\n        app.getLocaleInfo().then((localeInfoResult) => {\n          halyard.setDefaultSetStatements(convertQixGetLocalInfo(localeInfoResult), true);\n          return app.globalApi.configureReload(true, true, false).then(\n            () => app.setScript(halyard.getScript()).then(\n              () => app.doReload().then(() => app.globalApi.getProgress(0).then(\n                (progressResult) => {\n                  if (progressResult.qErrorData.length !== 0) {\n                    return app.checkScriptSyntax().then((syntaxCheckData) => {\n                      if (syntaxCheckData.length === 0) {\n                        throw createErrorMessage(LOADING_ERROR, progressResult.qErrorData[0]);\n                      } else {\n                        const item =\n                          halyard.getItemThatGeneratedScriptAt(syntaxCheckData[0].qTextPos);\n                        throw createErrorMessage(SYNTAX_ERROR, progressResult.qErrorData[0], item);\n                      }\n                    });\n                  }\n\n                  if (doSaveAfterReload) {\n                    return app.doSave().then(() => app);\n                  }\n\n                  return app;\n                })\n              )\n            )\n          );\n        })\n      );\n    },\n  },\n};\n\n\nconst exposeGlobalApi = {\n  types: 'Doc',\n  init(args) {\n    const getObjectArgs = {\n      handle: -1,\n      id: 'Global',\n      type: 'Global',\n    };\n    if (args.config) {\n      getObjectArgs.genericType = 'Global';\n    } else {\n      getObjectArgs.customType = 'Global';\n      getObjectArgs.delta = true;\n    }\n    args.api.globalApi = args.api.session.getObjectApi(getObjectArgs);\n  },\n};\n\nmodule.exports = [halyardMixin, exposeGlobalApi];\n\n\n\n// WEBPACK FOOTER //\n// ./src/enigma-mixin/halyard-enigma-mixin.js","export default function convertQixGetLocalInfo(localInfoData) {\n  return {\n    ThousandSep: localInfoData.qThousandSep,\n    DecimalSep: localInfoData.qDecimalSep,\n    MoneyThousandSep: localInfoData.qMoneyThousandSep,\n    MoneyDecimalSep: localInfoData.qMoneyDecimalSep,\n    MoneyFormat: localInfoData.qMoneyFmt,\n    TimeFormat: localInfoData.qTimeFmt,\n    DateFormat: localInfoData.qDateFmt,\n    TimestampFormat: localInfoData.qTimestampFmt,\n    FirstWeekDay: localInfoData.qFirstWeekDay,\n    ReferenceDay: localInfoData.qReferenceDay,\n    FirstMonthOfYear: localInfoData.qFirstMonthOfYear,\n    CollationLocale: localInfoData.qCollation,\n    MonthNames: localInfoData.qCalendarStrings.qMonthNames,\n    LongMonthNames: localInfoData.qCalendarStrings.qLongMonthNames,\n    DayNames: localInfoData.qCalendarStrings.qDayNames,\n    LongDayNames: localInfoData.qCalendarStrings.qLongDayNames,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/enigma-mixin/utils.js"],"sourceRoot":""}